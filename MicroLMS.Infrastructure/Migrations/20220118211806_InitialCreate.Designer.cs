// <auto-generated />
using System;
using MicroLMS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MicroLMS.Infrastructure.Migrations
{
    [DbContext(typeof(MicroLMSContext))]
    [Migration("20220118211806_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MicroLMS.Domain.ContentLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContentLinks");
                });

            modelBuilder.Entity("MicroLMS.Domain.Discipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("MicroLMS.Domain.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Complexity")
                        .HasColumnType("real");

                    b.Property<Guid?>("ContentLinkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExerciseBlockId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContentLinkId");

                    b.HasIndex("ExerciseBlockId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("MicroLMS.Domain.ExerciseBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContentLinkId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Guidance")
                        .HasColumnType("text");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Subtype")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContentLinkId");

                    b.HasIndex("SessionId");

                    b.ToTable("ExerciseBlocks");
                });

            modelBuilder.Entity("MicroLMS.Domain.ExerciseVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Complexity")
                        .HasColumnType("real");

                    b.Property<Guid?>("ContentLinkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContentLinkId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseVariants");
                });

            modelBuilder.Entity("MicroLMS.Domain.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UploadType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("MicroLMS.Domain.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContentLinkId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContentLinkId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("MicroLMS.Domain.Exercise", b =>
                {
                    b.HasOne("MicroLMS.Domain.ContentLink", "ContentLink")
                        .WithMany()
                        .HasForeignKey("ContentLinkId");

                    b.HasOne("MicroLMS.Domain.ExerciseBlock", "ExerciseBlock")
                        .WithMany("Exercises")
                        .HasForeignKey("ExerciseBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentLink");

                    b.Navigation("ExerciseBlock");
                });

            modelBuilder.Entity("MicroLMS.Domain.ExerciseBlock", b =>
                {
                    b.HasOne("MicroLMS.Domain.ContentLink", "ContentLink")
                        .WithMany()
                        .HasForeignKey("ContentLinkId");

                    b.HasOne("MicroLMS.Domain.Session", "Session")
                        .WithMany("ExerciseBlocks")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentLink");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("MicroLMS.Domain.ExerciseVariant", b =>
                {
                    b.HasOne("MicroLMS.Domain.ContentLink", "ContentLink")
                        .WithMany()
                        .HasForeignKey("ContentLinkId");

                    b.HasOne("MicroLMS.Domain.Exercise", "Exercise")
                        .WithMany("ExerciseVariants")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentLink");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("MicroLMS.Domain.Option", b =>
                {
                    b.HasOne("MicroLMS.Domain.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("MicroLMS.Domain.Session", b =>
                {
                    b.HasOne("MicroLMS.Domain.ContentLink", "ContentLink")
                        .WithMany()
                        .HasForeignKey("ContentLinkId");

                    b.HasOne("MicroLMS.Domain.Discipline", "Discipline")
                        .WithMany("Sessions")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentLink");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("MicroLMS.Domain.Discipline", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("MicroLMS.Domain.Exercise", b =>
                {
                    b.Navigation("ExerciseVariants");
                });

            modelBuilder.Entity("MicroLMS.Domain.ExerciseBlock", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("MicroLMS.Domain.Session", b =>
                {
                    b.Navigation("ExerciseBlocks");
                });
#pragma warning restore 612, 618
        }
    }
}
